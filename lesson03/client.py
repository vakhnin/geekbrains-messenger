# Реализовать простое клиент-серверное взаимодействие по протоколу JIM (JSON instant messaging):
#
# * клиент отправляет запрос серверу;
# * сервер отвечает соответствующим кодом результата.
#
# Клиент и сервер должны быть реализованы в виде отдельных скриптов,
# содержащих соответствующие функции.
# Функции клиента:
# * сформировать presence-сообщение;
# * отправить сообщение серверу;
# * получить ответ сервера; разобрать сообщение сервера;
# * параметры командной строки скрипта client.py <addr> [<port>]:
#   addr — ip-адрес сервера;
#   port — tcp-порт на сервере, по умолчанию 7777.
# Функции сервера:
# * принимает сообщение клиента;
# * формирует ответ клиенту;
# * отправляет ответ клиенту;
# * имеет параметры командной строки:
#   -p <port> — TCP-порт для работы (по умолчанию использует 7777);
#   -a <addr> — IP-адрес для прослушивания (по умолчанию слушает все доступные адреса).
import sys
from socket import socket, SOCK_STREAM

try:
    addr, port = 'localhost', 7777
    if len(sys.argv) > 1:
        addr = sys.argv[1]
    if len(sys.argv) > 2:
        port = int(sys.argv[2])

    sock = socket(type=SOCK_STREAM)
    sock.connect((addr, port))
    print('Соединение с сервером установлено')
except ConnectionRefusedError:
    err_msg = 'Подключение не установлено, т.к. конечный компьютер ' + \
            'отверг запрос на подключение'
    print(err_msg)
finally:
    sock.close()
    print('Соединение с сервером закрыто')
